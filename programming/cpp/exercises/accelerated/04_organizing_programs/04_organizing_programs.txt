================================================================================
4-0 Compile, execute, and test the programs in this chapter.
================================================================================
See course_grade_functions.cpp, median.h, median.cpp, student_info.h,
student_info.cpp, grade.h, grade.cpp, and course_grade_structure.cpp.

================================================================================
4-1 We noted that in 4.2.3/65 that it is essential that the argument types in a
call to max match exactly. Will the following code work? If there is a problem,
how would you fix it?
********************************************************************************
int maxlen;
Student_info s;
max(s.name.size(), maxlen);
********************************************************************************
================================================================================
The code will not work because s.name.size() has type std::string:size_type and
maxlen has type int. We can fix this program by declaring maxlen to have type
std::string:size_type rather than type int.

================================================================================
4-2 Write a program to calculate the squares of int values up to 100. The
program should write two columns: the first lists the value; the second
contains the square of that value. Use setw (described above) to manage the
output so that the values line up in columns.
================================================================================
See print_squares_100.cpp.

================================================================================
4-3 What happens if we rewrite the previous program to allow values up to but
not including 1000 but neglect to change the arguments to setw? Rewrite the
program to be more robust in the face of changes that allow i to grow without
adjusting the setw arguments.
================================================================================
See print_squares.cpp.

================================================================================
4-4 Now change your squares program to use double values instead of ints. Use
manipulators to manage the output so that the values line up in columns.
================================================================================
See print_squares_doubles.cpp.

================================================================================
4-5 Write a function that reads words from an input stream and stores them in a
vector. Use that function to write a program that both counts the number of
words in the input, and to count how many times each word occurred.
================================================================================
See word_counts.cpp.

================================================================================
4-6 Rewrite the Student_info structure, and the read and grade functions, so
that they calculate each student's grades as part of reading the input, and
store only the final grade.
================================================================================
See course_grade_student_info.cpp.

================================================================================
4-7 Write a program to calculate the average of the numbers stored in a
vector<double>.
================================================================================
See vector_double_avg.cpp.

================================================================================
4-8 If the following code is legal, what can we infer about the return type of
f?
********************************************************************************
double d = f()[n];
********************************************************************************
================================================================================
The return type of f must an object that supports indexing, and returns a
double when used in an indexing expression. For example, f might be a container
(such as a vector) of doubles.
