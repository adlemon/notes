================================================================================
1-0 Compile, execute, and test the programs in this chapter.
================================================================================
See greet.cpp and greet_framed.cpp.

================================================================================
1-1 Are the following definitions valid? Why or why not?
********************************************************************************
const std::string hello = "Hello";
const std::string message = hello + ", world" + "!";
********************************************************************************
================================================================================
Both definitions are valid. The definition of hello initializes this variable to
a simple string literal. The definition of message initializes this variable to
the result of the expression on the left; since + is left associative, the
expression first computes hello + ", world" to yield a string object; then the
expression computes the result of the first concatenation and "!".

================================================================================
1-2 Are the following definitions valid? Why or why not?
********************************************************************************
const std::string exclam = "!";
const std::string message = "Hello" + ", world" + exclam;
********************************************************************************
================================================================================
The first definition is valid, but the second is not. The definition of exclam
initializes this variable to a simple string literal. The definition of message
is not valid because + is left associative; this means that the expression on
the right side of the definition of message first attempts to evaluate
"Hello" + ", world". However, this is invalid because we are not allowed to
concatenate two string literals -- at least one of the operands must be a string
object.

================================================================================
1-3 Is the following program valid? If so, what does it do? If not, why not?
********************************************************************************
#include <iostream>
#include <string>

int main()
{
  { const std::string s = "a string";
    std::cout << s << std::endl; }

  { const std::string s = "another string";
    std::cout << s << std::endl; }

  return 0;
}
********************************************************************************
================================================================================
This program is valid because the two declarations of s occur in different
blocks, which have different scopes. Thus, the program prints the following.
********************************************************************************
a string
another string
********************************************************************************

================================================================================
1-4 Is the following program valid? If so, what does it do? If not, why not?
What if we change }} to };} in the third line from the end?
********************************************************************************
#include <iostream>
#include <string>

int main()
{
  { const std::string s = "a string";
    std::cout << s << std::endl;
  { const std::string s = "another string";
    std::cout << s << std::endl; }}
  return 0;
}
********************************************************************************
================================================================================
The program is valid because the second declaration of s occurs within a nested
scope, and therefore does not constitute a second definition in the same scope.
The program will print the following.
********************************************************************************
a string
another string
********************************************************************************
The program is still valid and prints the same thing if we replace }} with };}
in the third line from the end.

================================================================================
1-5 Is this program valid? If so, what does it do? If not, say why not, and
rewrite it be valid.
********************************************************************************
#include <iostream>
#include <string>

int main()
{
  { std::string s = "a string";
    { std::string x = s + ", really";
      std::cout << s << std::endl; }
    std::cout << x << std::endl;
  }
  return 0;
}
********************************************************************************
================================================================================
The program is not valid because the variable x is out of scope when it is sent
to the standard output. One way to rewrite the program to be valid is to move
the statement that sends x to the standard output inside the inner scope, as
shown below.
********************************************************************************
#include <iostream>
#include <string>

int main()
{
  { std::string s = "a string"; }
    { std::string x = s + ", really";
      std::cout << s << std::endl;
      std::cout << x << std::endl; }}
  return 0;
}
********************************************************************************

================================================================================
1-6 What does the following program do if, when it asks you for input, you type
two names (for example, Samuel Beckett)? Predict the behavior before running the
program, then try it.
#include <iostream>
#include <string>

int main()
{
  std::cout << "What is your name? ";
  std::string name;
  std::cin >> name;
  std::cout << "Hello, " << name << std::endl
    << "And what is yours? ";
  std::cin >> name;
  std::cout << "Hello, " << name << "; nice to meet you, too!" << std::endl;
  return 0;
}
================================================================================
Recall that reading from the standard input only reads up to the first blank
space. Therefore, if we enter two names, only the first name will appear in the
output of the program.
