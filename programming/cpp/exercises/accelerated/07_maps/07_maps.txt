================================================================================
7-0 Compile, execute, and test the programs in this chapter.
================================================================================
See count_words.cpp, make_index.cpp, and generate_sentences.cpp.

================================================================================
7-1 Extend the program from section 7.4 (page 124) to produce its output sorted
by occurrence count. That is, the output should group all words that occur
once, followed by those that occur twice, and so on.
================================================================================
See count_words_sorted.cpp.

================================================================================
7-2 Extend the program in section 4.2.3 (page 64) to assign letter grades by
ranges:
A 90 - 100
B 80 - 89.99...
C 70 - 79.99...
D 60 - 69.99...
F < 60
The output should list the number of students that fall into each category.
================================================================================
See letter_grade_histogram.cpp.

================================================================================
7-3 The cross-reference program from section 7.3 (page 126) could be improved:
As it stands, if a word occurs more than once on the same input line, the
program will report that line multiple times. Change the code so that it
detects multiple occurrences of the same line number and inserts the line
number only once.
================================================================================
See make_index_deduplicate.cpp.

================================================================================
7-4 The output produced by the cross-reference program will be ungainly if the
input file is large. Rewrite the program to break up the output if the lines
get too long.
================================================================================
See make_index_wrap.cpp.

================================================================================
7-5 Reimplement the grammar program using a list as the data structure in which
we build the sentence.
================================================================================
See generate_sentences_list.cpp.

================================================================================
7-6 Reimplement the gen_sentence program using two vectors: one will hold the
fully unwound, generated sentence, and the other will hold the rules and will
be used as a stack. Do not use any recursive calls.
================================================================================
See generate_sentences_iterative.cpp.

================================================================================
7-7 Change the driver for the cross-reference program so that it writes "line"
if there is only one line and "lines" otherwise.
================================================================================
See generate_index_line_vs_lines.cpp.

================================================================================
7-8 Change the cross-reference program to find all the URLs in a file, and
write all the lines on which each distinct URL occurs.
================================================================================
See index_urls.cpp.

================================================================================
7-9 The implementation of nrand in section 7.4.4 (page 135) will not work for
arguments greater than RAND_MAX. Usually, this restriction is no problem,
because RAND_MAX is often the largest possible integer anyway. Nevertheless,
there are implementations under which RAND_MAX is much smaller than the largest
possible integer. For example, it is not common for RAND_MAX to be 32767 (2^15
- 1) and the largest possible integer to be 2147483647 (2^31 - 1). Reimplement
the nrand so that it works for all of the integer n.
================================================================================
See nrand_binary.cpp and nrand_limited.cpp for two approaches to this problem.
