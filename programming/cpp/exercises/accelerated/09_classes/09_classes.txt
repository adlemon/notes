================================================================================
9-0 Compile, execute, and test the programs in this chapter.
================================================================================
See student_course_grade_class.cpp.

================================================================================
9-1 Reimplement the Student_info class so that it calculates the final grade
when reading the student's record, and stores the grade in the object.
Reimplement the grade function to use this precomputed value.
================================================================================
See student_course_grade_overall.cpp.

================================================================================
9-2 If we define the name function as a non-const member function, what other
functions in our system must change and why?
================================================================================
If we define the name function as a non-const member function, then we need to
change the signature of the compare function to accept non-const arguments.
Because compare calls the name function, if the name function is not declared to
be const, then the arguments of compare cannot be declared const since the call
to name might modify the arguments of compare.

================================================================================
9-3 Our grade function was written to throw an exception if a user tried to
calculate a grade for a Student_info object whose values had not yet been read.
Users who care are expected to catch this exception. Write a program that
triggers the exception but does not catch it. Write a program that catches the
exception.
================================================================================
See student_course_grade_class.cpp.

================================================================================
9-4 Rewrite your program from the previous exercise to use the valid function,
thereby avoiding the exception altogether.
================================================================================
See student_course_grade_check_valid.cpp.

================================================================================
9-5 Write a class and associated functions to generate grades for students who
take the course for pass/fail credit. Assume that only the midterm and final
grades matter, and that a student passes with an average exam score greater
than 60. The report should list the students in alphabetical order, and
indicate 'P' or 'F' as the grade.
================================================================================
See student_course_grades_pass_fail.cpp.

================================================================================
9-6 Rewrite the grading program for the pass/fail students so that the report
shows all the students who passed, followed by all the students who failed.
================================================================================
See student_course_grades_pass_fail_sort.cpp.

================================================================================
9-7 The read_hw function in section 4.1.3 (page 57) solves a general problem
(reading a sequence of values into a vector) even though its name suggests that
it should be part of the implementation of Student_info. Of course, we could
change its name -- but suppose, instead, that you wanted to integrate it with
the rest of the Student_info code, in order to clarify that it was not intended
for public access despite its apparent generality. How would you do so?
================================================================================
In order to integrate read_hw with the Student_info class, we could define
read_hw as a private member function of the Student_info class. This would make
it clear that read_hw is not intended for use outside the class.
